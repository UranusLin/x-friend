// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  password     String
  name         String?
  userType     UserType
  evmAddress   String? // EVM compatible address for transactions
  services     Service[]
  transactions Transaction[]
  ownedNFTs    NFT[]         @relation("UserOwnedNFTs")
  mintedNFTs   NFT[]         @relation("UserMintedNFTs")
}

model Service {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  providerId  String
  provider    User          @relation(fields: [providerId], references: [id])
  status      ServiceStatus
  nfts        NFT[] // NFTs associated with this service
  poaps       POAP[] // NFTs associated with this service
  Transaction Transaction[]
}

model Transaction {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  serviceId String
  service   Service           @relation(fields: [serviceId], references: [id])
  buyerId   String
  buyer     User              @relation(fields: [buyerId], references: [id])
  amount    Float
  status    TransactionStatus
  nftToken  String? // Token ID of the NFT representing the purchase
}

model NFT {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  status      TransactionStatus @default(PENDING)
  tokenId     String // Unique identifier for the NFT on the blockchain
  metadataUrl String // URL to the NFT metadata
  owner       User              @relation("UserOwnedNFTs", fields: [ownerId], references: [id])
  ownerId     String // ID of the user who owns the NFT
  minter      User              @relation("UserMintedNFTs", fields: [minterId], references: [id])
  minterId    String // ID of the user who minted the NFT
  service     Service?          @relation(fields: [serviceId], references: [id])
  serviceId   String? // ID of the services associated with the NFT
  createdAt   DateTime          @default(now())
}

model POAP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tokenId   String // Unique identifier for the POAP on the blockchain
  createdAt DateTime @default(now())
  nftId     String
  Service   Service? @relation(fields: [serviceId], references: [id])
  serviceId String?  @db.ObjectId
}

enum UserType {
  PROVIDER
  CONSUMER
}

enum ServiceStatus {
  AVAILABLE
  PENDING
  COMPLETED
}

enum TransactionStatus {
  PENDING
  COMPLETED
}
